// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: inventories/shelve_service.proto

package inventories

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ListShelveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination  *Pagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	WarehouseId string      `protobuf:"bytes,2,opt,name=warehouse_id,json=warehouseId,proto3" json:"warehouse_id,omitempty"`
}

func (x *ListShelveRequest) Reset() {
	*x = ListShelveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventories_shelve_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShelveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShelveRequest) ProtoMessage() {}

func (x *ListShelveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventories_shelve_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShelveRequest.ProtoReflect.Descriptor instead.
func (*ListShelveRequest) Descriptor() ([]byte, []int) {
	return file_inventories_shelve_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListShelveRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListShelveRequest) GetWarehouseId() string {
	if x != nil {
		return x.WarehouseId
	}
	return ""
}

type ShelvePaginationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination  *Pagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	WarehouseId string      `protobuf:"bytes,3,opt,name=warehouse_id,json=warehouseId,proto3" json:"warehouse_id,omitempty"`
	Count       uint32      `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ShelvePaginationResponse) Reset() {
	*x = ShelvePaginationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventories_shelve_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShelvePaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShelvePaginationResponse) ProtoMessage() {}

func (x *ShelvePaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventories_shelve_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShelvePaginationResponse.ProtoReflect.Descriptor instead.
func (*ShelvePaginationResponse) Descriptor() ([]byte, []int) {
	return file_inventories_shelve_service_proto_rawDescGZIP(), []int{1}
}

func (x *ShelvePaginationResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ShelvePaginationResponse) GetWarehouseId() string {
	if x != nil {
		return x.WarehouseId
	}
	return ""
}

func (x *ShelvePaginationResponse) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ListShelveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *ShelvePaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Shelve     *Shelve                   `protobuf:"bytes,2,opt,name=shelve,proto3" json:"shelve,omitempty"`
}

func (x *ListShelveResponse) Reset() {
	*x = ListShelveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventories_shelve_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShelveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShelveResponse) ProtoMessage() {}

func (x *ListShelveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventories_shelve_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShelveResponse.ProtoReflect.Descriptor instead.
func (*ListShelveResponse) Descriptor() ([]byte, []int) {
	return file_inventories_shelve_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListShelveResponse) GetPagination() *ShelvePaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListShelveResponse) GetShelve() *Shelve {
	if x != nil {
		return x.Shelve
	}
	return nil
}

var File_inventories_shelve_service_proto protoreflect.FileDescriptor

var file_inventories_shelve_service_proto_rawDesc = []byte{
	0x0a, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x68,
	0x65, 0x6c, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x14, 0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x78, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x18, 0x53, 0x68, 0x65, 0x6c,
	0x76, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77, 0x69, 0x72, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x9a, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x77, 0x69, 0x72,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x68, 0x65, 0x6c, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x68,
	0x65, 0x6c, 0x76, 0x65, 0x52, 0x06, 0x73, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x32, 0x85, 0x03, 0x0a,
	0x0d, 0x53, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46,
	0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x77, 0x69, 0x72, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x53, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x1a, 0x1c, 0x2e, 0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x68,
	0x65, 0x6c, 0x76, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x2e, 0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x1a, 0x1c,
	0x2e, 0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x22, 0x00, 0x12, 0x40,
	0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x18, 0x2e, 0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x49, 0x64,
	0x1a, 0x1c, 0x2e, 0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x22, 0x00,
	0x12, 0x43, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x77, 0x69, 0x72,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x49, 0x64, 0x1a, 0x1d, 0x2e, 0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e,
	0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x42, 0x1c, 0x5a, 0x1a, 0x70, 0x62, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x3b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inventories_shelve_service_proto_rawDescOnce sync.Once
	file_inventories_shelve_service_proto_rawDescData = file_inventories_shelve_service_proto_rawDesc
)

func file_inventories_shelve_service_proto_rawDescGZIP() []byte {
	file_inventories_shelve_service_proto_rawDescOnce.Do(func() {
		file_inventories_shelve_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_inventories_shelve_service_proto_rawDescData)
	})
	return file_inventories_shelve_service_proto_rawDescData
}

var file_inventories_shelve_service_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_inventories_shelve_service_proto_goTypes = []interface{}{
	(*ListShelveRequest)(nil),        // 0: wiradata.inventories.ListShelveRequest
	(*ShelvePaginationResponse)(nil), // 1: wiradata.inventories.ShelvePaginationResponse
	(*ListShelveResponse)(nil),       // 2: wiradata.inventories.ListShelveResponse
	(*Pagination)(nil),               // 3: wiradata.inventories.Pagination
	(*Shelve)(nil),                   // 4: wiradata.inventories.Shelve
	(*Id)(nil),                       // 5: wiradata.inventories.Id
	(*Boolean)(nil),                  // 6: wiradata.inventories.Boolean
}
var file_inventories_shelve_service_proto_depIdxs = []int32{
	3, // 0: wiradata.inventories.ListShelveRequest.pagination:type_name -> wiradata.inventories.Pagination
	3, // 1: wiradata.inventories.ShelvePaginationResponse.pagination:type_name -> wiradata.inventories.Pagination
	1, // 2: wiradata.inventories.ListShelveResponse.pagination:type_name -> wiradata.inventories.ShelvePaginationResponse
	4, // 3: wiradata.inventories.ListShelveResponse.shelve:type_name -> wiradata.inventories.Shelve
	4, // 4: wiradata.inventories.ShelveService.Create:input_type -> wiradata.inventories.Shelve
	4, // 5: wiradata.inventories.ShelveService.Update:input_type -> wiradata.inventories.Shelve
	5, // 6: wiradata.inventories.ShelveService.View:input_type -> wiradata.inventories.Id
	5, // 7: wiradata.inventories.ShelveService.Delete:input_type -> wiradata.inventories.Id
	0, // 8: wiradata.inventories.ShelveService.List:input_type -> wiradata.inventories.ListShelveRequest
	4, // 9: wiradata.inventories.ShelveService.Create:output_type -> wiradata.inventories.Shelve
	4, // 10: wiradata.inventories.ShelveService.Update:output_type -> wiradata.inventories.Shelve
	4, // 11: wiradata.inventories.ShelveService.View:output_type -> wiradata.inventories.Shelve
	6, // 12: wiradata.inventories.ShelveService.Delete:output_type -> wiradata.inventories.Boolean
	2, // 13: wiradata.inventories.ShelveService.List:output_type -> wiradata.inventories.ListShelveResponse
	9, // [9:14] is the sub-list for method output_type
	4, // [4:9] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_inventories_shelve_service_proto_init() }
func file_inventories_shelve_service_proto_init() {
	if File_inventories_shelve_service_proto != nil {
		return
	}
	file_inventories_shelve_message_proto_init()
	file_inventories_generic_message_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_inventories_shelve_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShelveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventories_shelve_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShelvePaginationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventories_shelve_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShelveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inventories_shelve_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_inventories_shelve_service_proto_goTypes,
		DependencyIndexes: file_inventories_shelve_service_proto_depIdxs,
		MessageInfos:      file_inventories_shelve_service_proto_msgTypes,
	}.Build()
	File_inventories_shelve_service_proto = out.File
	file_inventories_shelve_service_proto_rawDesc = nil
	file_inventories_shelve_service_proto_goTypes = nil
	file_inventories_shelve_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ShelveServiceClient is the client API for ShelveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShelveServiceClient interface {
	Create(ctx context.Context, in *Shelve, opts ...grpc.CallOption) (*Shelve, error)
	Update(ctx context.Context, in *Shelve, opts ...grpc.CallOption) (*Shelve, error)
	View(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Shelve, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Boolean, error)
	List(ctx context.Context, in *ListShelveRequest, opts ...grpc.CallOption) (ShelveService_ListClient, error)
}

type shelveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShelveServiceClient(cc grpc.ClientConnInterface) ShelveServiceClient {
	return &shelveServiceClient{cc}
}

func (c *shelveServiceClient) Create(ctx context.Context, in *Shelve, opts ...grpc.CallOption) (*Shelve, error) {
	out := new(Shelve)
	err := c.cc.Invoke(ctx, "/wiradata.inventories.ShelveService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shelveServiceClient) Update(ctx context.Context, in *Shelve, opts ...grpc.CallOption) (*Shelve, error) {
	out := new(Shelve)
	err := c.cc.Invoke(ctx, "/wiradata.inventories.ShelveService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shelveServiceClient) View(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Shelve, error) {
	out := new(Shelve)
	err := c.cc.Invoke(ctx, "/wiradata.inventories.ShelveService/View", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shelveServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/wiradata.inventories.ShelveService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shelveServiceClient) List(ctx context.Context, in *ListShelveRequest, opts ...grpc.CallOption) (ShelveService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ShelveService_serviceDesc.Streams[0], "/wiradata.inventories.ShelveService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &shelveServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ShelveService_ListClient interface {
	Recv() (*ListShelveResponse, error)
	grpc.ClientStream
}

type shelveServiceListClient struct {
	grpc.ClientStream
}

func (x *shelveServiceListClient) Recv() (*ListShelveResponse, error) {
	m := new(ListShelveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ShelveServiceServer is the server API for ShelveService service.
type ShelveServiceServer interface {
	Create(context.Context, *Shelve) (*Shelve, error)
	Update(context.Context, *Shelve) (*Shelve, error)
	View(context.Context, *Id) (*Shelve, error)
	Delete(context.Context, *Id) (*Boolean, error)
	List(*ListShelveRequest, ShelveService_ListServer) error
}

// UnimplementedShelveServiceServer can be embedded to have forward compatible implementations.
type UnimplementedShelveServiceServer struct {
}

func (*UnimplementedShelveServiceServer) Create(context.Context, *Shelve) (*Shelve, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedShelveServiceServer) Update(context.Context, *Shelve) (*Shelve, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedShelveServiceServer) View(context.Context, *Id) (*Shelve, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (*UnimplementedShelveServiceServer) Delete(context.Context, *Id) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedShelveServiceServer) List(*ListShelveRequest, ShelveService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterShelveServiceServer(s *grpc.Server, srv ShelveServiceServer) {
	s.RegisterService(&_ShelveService_serviceDesc, srv)
}

func _ShelveService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Shelve)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShelveServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.inventories.ShelveService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShelveServiceServer).Create(ctx, req.(*Shelve))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShelveService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Shelve)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShelveServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.inventories.ShelveService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShelveServiceServer).Update(ctx, req.(*Shelve))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShelveService_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShelveServiceServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.inventories.ShelveService/View",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShelveServiceServer).View(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShelveService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShelveServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.inventories.ShelveService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShelveServiceServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShelveService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListShelveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShelveServiceServer).List(m, &shelveServiceListServer{stream})
}

type ShelveService_ListServer interface {
	Send(*ListShelveResponse) error
	grpc.ServerStream
}

type shelveServiceListServer struct {
	grpc.ServerStream
}

func (x *shelveServiceListServer) Send(m *ListShelveResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ShelveService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wiradata.inventories.ShelveService",
	HandlerType: (*ShelveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ShelveService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ShelveService_Update_Handler,
		},
		{
			MethodName: "View",
			Handler:    _ShelveService_View_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ShelveService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _ShelveService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "inventories/shelve_service.proto",
}
